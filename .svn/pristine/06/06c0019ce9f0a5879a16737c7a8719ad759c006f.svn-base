///////////////////////////////////////////////////////////
//  Swagger.cs
//  Implementation of the Class Swagger
//  Generated by Enterprise Architect
//  Created on:      28-jul.-2017 14:02:27
//  Original author: Edgardo
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;


namespace RestFul.modelo
{
    public class Swagger
    {
        /// <summary>
        /// Especifica la versi�n de Swagger Specification que se est� utilizando. Puede
        /// ser utilizado por la interfaz de Swagger y otros clientes para interpretar la
        /// lista de API. El valor DEBE ser "2.0".
        /// </summary>
        public String version = "2.0";
        /// <summary>
        /// El host (nombre o ip) que sirve la API. Esto DEBE ser el anfitri�n solamente y
        /// no incluye el esquema ni los sub-trayectos. PUEDE incluir un puerto. Si no se
        /// incluye el host, se debe utilizar el host que sirve la documentaci�n (incluido
        /// el puerto). El host no admite <a href="$inet://https://swagger.
        /// io/specification/#pathTemplating"><font color="#0000ff"><u>la plantilla de
        /// ruta</u></font></a>.
        /// </summary>
        public string host;
        /// <summary>
        /// La ruta base en la que se sirve la API, que es relativa al host. Si no se
        /// incluye, la API se sirve directamente bajo el host. El valor DEBE comenzar con
        /// una barra diagonal principal (/). El basePath no admite <a href="$inet://https:
        /// //swagger.io/specification/#pathTemplating"><font color="#0000ff"><u>la
        /// plantilla de ruta</u></font></a>.
        /// </summary>
        public string basePath;
        /// <summary>
        /// El protocolo de transferencia del API. Los valores DEBEN ser de la lista:
        /// "http", "https", "ws", "wss". Si no se incluyen los esquemas, el esquema
        /// predeterminado que se utilizar� es el que se utiliza para acceder a la propia
        /// definici�n de Swagger.
        /// </summary>
        public List<string> schemes = new List<string>();
        /// <summary>
        /// Una lista de tipos MIME que las API pueden consumir. Esto es global para todas
        /// las API pero puede ser anulado en llamadas espec�ficas de la API. El valor DEBE
        /// ser como se describe en <a href="$inet://https://swagger.
        /// io/specification/#mimeTypes"><font color="#0000ff"><u>Mime Types</u></font></a>.
        /// 
        /// </summary>
        public List<string> consumes = new List<string>();
        /// <summary>
        /// Una lista de tipos MIME que las API pueden producir. Esto es global para todas
        /// las API pero puede ser anulado en llamadas espec�ficas de la API. El valor DEBE
        /// ser como se describe en https://swaggerio/specification/#mimeTypes.
        /// 
        /// </summary>
        public List<string>                           produces            = new List<string>();
        public Info                                   info                = new Info();
        public Dictionary<string, PathItem>           paths               = new Dictionary<string, PathItem>();
        public Dictionary<string, EntityDefinition>   entityDefinitions   = new Dictionary<string, EntityDefinition>();
        //public Dictionary<string, EA.Element> pathDefinitions = new Dictionary<string, EA.Element>();
        public Dictionary<string, SecurityDefinition> securityDefinitions = new Dictionary<string, SecurityDefinition>();
        public Dictionary<string, Tag>                tags                = new Dictionary<string, Tag>();
        public List<ExternalDoc>                      externalDocs        = new List<ExternalDoc>();
        public SecurityRequirement                    security            = null;

        public EntityDefinition currentEntityDefinition;

        public Swagger()
        {
        }

        public void addPath(string recurso)
        {
            paths.Add(recurso, new PathItem(recurso));
        }

        public PathItem getPath( string recurso )
        {
            PathItem path = new PathItem();
            if( ! paths.TryGetValue(recurso, out path) )
            {
                path = null;
            }
            return path;
        }

        public void addEntityDefinition( EA.Element element )
        {
            if( ! this.entityDefinitions.ContainsKey( element.Name ) )
            {
                this.currentEntityDefinition = new EntityDefinition(element);

                this.entityDefinitions.Add(element.Name, this.currentEntityDefinition);
            }
        }
        public Boolean hasEntityDefinition(EA.Element element)
        {
            return this.entityDefinitions.ContainsKey(element.Name);
        }

    }//end Swagger
}