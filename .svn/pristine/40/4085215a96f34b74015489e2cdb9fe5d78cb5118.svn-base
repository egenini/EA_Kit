using EA;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace EAUtils
{
    public class ElementUtils
    {
        public Repository repository;
        private EAUtils eaUtils;

        public ElementUtils(Repository repository)
        {
            this.repository = repository;
        }
        public void setEaUtils( EAUtils eaUtils)
        {
            this.eaUtils = eaUtils;
        }

        /// <summary>
        /// Uso interno.
        /// Crea una instancia del elemento con el mismo tipo y nombre que el clasificador.
        /// </summary>
        /// <param name="elementoClasificador"></param>
        /// <param name="parent">La coleccion desde la cual se genera el elemento </param>
        /// <param name="intanceStereoType"></param>
        /// <param name="diagram"></param>
        /// <returns></returns>
        private Element createInstance(EA.Element elementoClasificador, Collection parent, string intanceStereoType, Diagram diagram)
        {
            return createInstance(null, elementoClasificador, parent, intanceStereoType, diagram);
        }

        private Element createInstance(string nombre, EA.Element elementoClasificador, Collection parent, string instanceStereoType, Diagram diagram)
        {
            Element instancia = null;
            // control de instancia de instancia
            if (elementoClasificador.ClassifierID == 0)
            {
                instancia = parent.AddNew( nombre == null || nombre.Length == 0 ? elementoClasificador.Name : nombre, elementoClasificador.Type);

                if(instanceStereoType != null && instanceStereoType.Length != 0 )
                {
                    instancia.Stereotype = instanceStereoType;
                }
                instancia.Update();
                parent.Refresh();

                this.eaUtils.connectorUtils.settingConnectorsForInstanceElement(instancia, elementoClasificador, diagram);
            }
            return instancia;
        }


        /// <summary>
        /// Crea una instancia del mismo tipo que el clasificador y le agrega una relación de instanciación.
        /// </summary>
        /// <param name="nombre">Nombre de la instacia, puede ser null o ""</param>
        /// <param name="elementoClasificador"></param>
        /// <param name="parent">El paquete al cual pertenece la instancia a crear </param>
        /// <param name="instanceStereoType">El estereotipo que se le asigna a la instancia, puede ser null o ""</param>
        /// <param name="diagram"></param>
        /// <returns>El elemento instancia creado</returns>
        public Element createInstance(string nombre, EA.Element elementoClasificador, Package parent, string instanceStereoType, Diagram diagram)
        {
            return createInstance(nombre, elementoClasificador, parent.Elements, instanceStereoType, diagram);
        }

        /// <summary>
        /// Crea una instancia del mismo tipo que el clasificador y le agrega una relación de instanciacion y nesting.
        /// </summary>
        /// <param name="nombre">Nombre de la instacia, puede ser null o ""</param>
        /// <param name="elementoClasificador"></param>
        /// <param name="parent">El elemento al cual pertenece la instancia a crear </param>
        /// <param name="instanceStereoType">El estereotipo que se le asigna a la instancia, puede ser null o ""</param>
        /// <param name="diagram"></param>
        /// <returns>El elemento instancia creado</returns>
        public Element createInstance(string nombre, EA.Element elementoClasificador, Element parent, string instanceStereoType, Diagram diagram)
        {
            Element instancia = createInstance(nombre, elementoClasificador, parent.Elements, instanceStereoType, diagram);
            eaUtils.connectorUtils.addConnectorNesting(instancia, parent, null, null);
            return instancia;
        }

        public string enumeration2Csv( Element enumeration, bool useAlias )
        {
            string csv = "";
            //string attrChar = "\"";

            foreach (EA.Attribute attr in enumeration.Attributes )
            {
                csv += (useAlias ? attr.Alias : attr.Name) + ",";
                //csv +=  attrChar + ( useAlias ? attr.Alias : attr.Name ) + attrChar + ",";
            }
            return csv.Substring(0, csv.Length - 1);

        }
        public Element addDefect(Element element, string name, string notes)
        {
            Element defect = element.Elements.AddNew(name, "Defect");
            defect.Notes = notes;
            defect.Update();

            eaUtils.connectorUtils.addConnectorDependency(defect, element, null, null);

            element.Elements.Refresh();
            return defect;
        }
    }
}
