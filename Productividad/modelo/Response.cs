///////////////////////////////////////////////////////////
//  Response.cs
//  Implementation of the Class Response
//  Generated by Enterprise Architect
//  Created on:      28-jul.-2017 13:59:45
//  Original author: Edgardo
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace Productividad.modelo
{

    /// <summary>
    /// Un contenedor para las respuestas esperadas de una operación. El contenedor
    /// asigna un código de respuesta HTTP a la respuesta esperada. No se espera que la
    /// documentación cubra necesariamente todos los posibles códigos de respuesta HTTP,
    /// ya que pueden no ser conocidos de antemano. Sin embargo, se espera de la
    /// documentación que cubra una respuesta de operación exitosa y cualquier error
    /// conocido.
    /// 
    /// El valor predeterminado se puede usar como el objeto de respuesta
    /// predeterminado para todos los códigos HTTP que no están cubiertos
    /// individualmente por la especificación.
    /// 
    /// El objeto de respuestas DEBE contener al menos un código de respuesta, y DEBE
    /// ser la respuesta para una llamada de operación exitosa.
    /// </summary>
    public class Response {

        public string description;
        public JsonSchema schema = null;
        public string @ref = null;
        /// <summary>
        /// Además de los códigos http puede tener un "default".
        /// </summary>
        public string httpStatusCode;
        public Dictionary<string, Header> headers = new Dictionary<string, Header>();
        public Header currentHeader;

        public Response( string httpStatusCode )
        {
            this.httpStatusCode = httpStatusCode;
        }

        public void setSchema( )
        {
            if( this.schema == null )
            {
                this.schema = new JsonSchema();
            }
        }

        public void addHeader(string headerKey )
        {
            this.currentHeader = new Header();
            this.headers.Add(headerKey, this.currentHeader);
        }
    }
}