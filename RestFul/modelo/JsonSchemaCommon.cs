///////////////////////////////////////////////////////////
//  JsonSchemaCommon.cs
//  Implementation of the Class JsonSchemaCommon
//  Generated by Enterprise Architect
//  Created on:      30-jul.-2017 12:34:56
//  Original author: Edgardo
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



namespace RestFul.modelo {
	/// <summary>
	/// El Objeto Esquema permite la definición de tipos de datos de entrada y salida.
	/// Estos tipos pueden ser objetos, pero también primitivas y matrices. Este objeto
	/// se basa en el JSON Schema Specification Draft 4 y utiliza un subconjunto
	/// predefinido del mismo. En la parte superior de este subconjunto, hay
	/// extensiones proporcionadas por esta especificación para permitir una
	/// documentación más completa.
	/// </summary>
	public class JsonSchemaCommon {

        /// <summary>
        /// Archivos y objetos no están permitidos.
        /// </summary>
        public string type;
        /// <summary>
        /// El formato de extensión para el tipo mencionado anteriormente. Consulte <a
        /// href="$inet://https://swagger.io/specification/#dataTypeFormat"><font
        /// color="#0000ff"><u>Formatos de tipo de datos</u></font></a> para obtener más
        /// detalles.
        /// </summary>
        public string format = null;
        /// <summary>
        /// Declara el valor del elemento que utilizará el servidor si no se proporciona
        /// ninguno. (Nota: "default" no tiene significado para los elementos requeridos.)
        /// 
        /// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2.
        /// 
        /// 
        /// A diferencia de JSON Schema, este valor DEBE ajustarse al tipo definido para el
        /// tipo de datos.
        /// </summary>
        public Object @default = null;
		/// <summary>
		/// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.
		/// 2.
		/// </summary>
		public Nullable<int> maximum;
		/// <summary>
		/// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.
		/// 2.
		/// </summary>
		public Nullable<Boolean> exclusiveMaximum;
		/// <summary>
		/// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.
		/// 3.
		/// </summary>
		public Nullable<int> minimum;
		public Nullable<Boolean> exclusiveMinimum;
		/// <summary>
		/// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.
		/// 1.
		/// </summary>
		public Nullable<int> maxLength;
		public Nullable<int> minLength;
		/// <summary>
		/// See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.
		/// 3.
		/// 
		/// Valid values
		/// 
		///   The value of this keyword MUST be a string.  This string SHOULD be a
		///   valid regular expression, according to the ECMA 262 regular
		///   expression dialect.
		/// </summary>
		public string pattern = null;
		/// <summary>
		/// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.
		/// 2.
		/// </summary>
		public Nullable<int> maxItems;
		/// <summary>
		/// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.
		/// 3.
		/// </summary>
		public Nullable<int> minItems;
		/// <summary>
		/// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.
		/// 4.
		/// </summary>
		public Nullable<Boolean> uniqueItems;
		/// <summary>
		/// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.
		/// 1.
		/// </summary>
		public List<Object> @enum = new List<Object>();
		/// <summary>
		/// Ver https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.
		/// 1.
		/// </summary>
		public Nullable<int>  multipleOf;

		public JsonSchemaCommon(){

		}
	}
}